" Cool Other vimrcs to look at
" - http://www.lukesmith.xyz/conf/.vimrc
" - https://github.com/thoughtstream/Damian-Conway-s-Vim-Setup
" - https://github.com/jschomay/.vim/blob/master/vimrc

" ========== Vundle Plugin Management ==========
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set runtimepath+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Language/Syntax Support
Plugin 'aklt/plantuml-syntax'
Plugin 'digitaltoad/vim-pug'
Plugin 'keith/swift.vim'
Plugin 'krisajenkins/vim-postgresql-syntax'
Plugin 'lervag/vimtex'
Plugin 'mboughaba/i3config.vim'
Plugin 'moll/vim-node'
Plugin 'mxw/vim-jsx'
Plugin 'OmniSharp/omnisharp-vim'
Plugin 'othree/html5.vim'
Plugin 'othree/html5-syntax.vim'
Plugin 'pangloss/vim-javascript'
Plugin 'jlevesy/rust.vim' " Had to use this because it's on cargo
Plugin 'junegunn/vader.vim'
Plugin 'vim-scripts/mips.vim'
Plugin 'vim-scripts/SQLUtilities'

" UI
Plugin 'airblade/vim-gitgutter'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'reewr/vim-monokai-phoenix'
Plugin 'scrooloose/nerdtree'
Plugin 'vim-airline/vim-airline'
Plugin 'Xuyuanp/nerdtree-git-plugin'

" Editing
Plugin 'alvan/vim-closetag'
Plugin 'aperezdc/vim-template'
Plugin 'Chiel92/vim-autoformat'
Plugin 'ervandew/supertab'
Plugin 'gioele/vim-autoswap' " requires wmctrl on Linux
Plugin 'heavenshell/vim-jsdoc'
Plugin 'jiangmiao/auto-pairs'
Plugin 'sumnerevans/vim-listtrans'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-surround'
Plugin 'Valloric/YouCompleteMe'
Plugin 'sumnerevans/ale' " for formatting and linting

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" Source other Vim files
source $HOME/.vim/shortcuts " Shortcuts for the things I type a lot in insert mode

let s:os = system('uname -s')

" NERDTree Config
let g:NERDTreeIndicatorMapCustom = {
            \'Modified': '✹', 'Staged': '✚', 'Untracked': '✭', 'Renamed': '➜', 'Unmerged': '═',
            \'Deleted': '✖', 'Dirty': '✗', 'Clean': '✔︎', 'Unknown': '?' }
let g:NERDTreeShowHidden=1
let g:NERDTreeIgnore=[
            \'.git$[[dir]]',
            \'.sass-cache$[[dir]]', '__pycache__$[[dir]]', '.pyc',
            \'.out$[[file]]', '.aux$[[file]]', '.log$[[file]]', '_minted-*',
            \'.gz$[[file]]', '.fls$[[file]]', '.fdb_latexmk$[[file]]',
            \]
let g:NERDTreeWinSize=30
let g:nerdtree_tabs_open_on_console_startup=1
let g:nerdtree_tabs_synchronize_view = 0
let g:NERDTreeWinPos = 'right'

" Editor Tabs
set showtabline=2 " always show the tab bar
map <c-h> :tabp<CR>
map <c-l> :tabn<CR>
map <c-t> :tabnew<CR>

" Navigation between buffers in tab
set splitbelow
set splitright
if $TERM ==# 'rxvt-unicode-256color' && !has('gui_running')
    map <Esc>k <C-W><C-K>
    map <Esc>j <C-W><C-J>
    map <Esc>h <C-W><C-H>
    map <Esc>l <C-W><C-L>
else
    map <A-k> <C-W><C-K>
    map <A-j> <C-W><C-J>
    map <A-h> <C-W><C-H>
    map <A-l> <C-W><C-L>
endif

" History and Undo
set history=1000
set undolevels=1000
set undofile

" Put swap and undo files in .vim
set directory=~/.vim/swap//
set undodir=~/.vim/undo//

set wildignore=*.swp,*.bak,*.pyc,*.out,*.git
set title
set noerrorbells

" Make Vim the use the system clipboard
if s:os ==# "Linux\n"
    set clipboard=unnamedplus
else
    set clipboard+=unnamed
endif

vnoremap <C-c> "+yy

" Navigating with guides
map <Space><Backspace> a(<>) <Esc>
map <Space><Space> <Esc>/(<>)<Enter>"_c4l

" Editing
set tabstop=4
set softtabstop=0
set expandtab
set smarttab
set autoindent
set number
set mouse=a
syntax enable
set backspace=indent,eol,start
set scrolloff=5
set virtualedit=onemore
set t_Co=256

" Make j and k behave nicer when the line wraps
noremap j gj
noremap k gk

" Tab Width
set shiftwidth=4
autocmd FileType javascript,xhtml,html,scss,yaml,css,markdown set shiftwidth=2

" Search
set hlsearch
set incsearch
set ignorecase

" Column Guides
set colorcolumn=80,100,120

" Highlight unwanted whitespace
set list listchars=tab:\▶\ ,trail:␣,nbsp:␣

" YouCompleteMe
let g:ycm_confirm_extra_conf = 0
let g:ycm_rust_src_path = '/home/sumner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src'
let g:ycm_python_binary_path = '/usr/bin/python3'
nnoremap <F12> :YcmCompleter GoTo<CR>
nnoremap <S-F12> :YcmCompleter GoToReferences<CR>
nnoremap <F6> :YcmCompleter GetDoc<CR>

" Automatically break lines at 80 characters on TeX/LaTeX, Markdown, and text
" files
" Enable spell check on TeX/LaTeX, Markdown, and text files
autocmd BufNewFile,BufRead *.tex,*.md,*.txt setlocal tw=80
autocmd BufNewFile,BufRead *.tex,*.md,*.txt setlocal spell spelllang=en_gb,es_es

" Associate *.tex with tex filetype (instead of plaintex)
autocmd BufRead,BufNewFile *.tex set filetype=tex

" Associate .s and .spim files with MIPS
autocmd BufRead,BufNewFile *.s set filetype=mips
autocmd BufRead,BufNewFile *.spim set filetype=mips

" Automatically break lines at 100 characters when writing HTML files
" Enable spell check on HTML and PUG files
autocmd BufNewFile,BufRead *.html setlocal tw=100
autocmd BufNewFile,BufRead *.html setlocal spell spelllang=en_gb,es_es

" Automatically break lines at 80 characters when writing emails in mutt
" Enable spell check for emails in mutt
autocmd BufRead $HOME/tmp/mutt-* setlocal tw=72
autocmd BufRead $HOME/tmp/mutt-* setlocal spell spelllang=en_gb,es_es
autocmd BufRead $HOME/tmp/mutt-* setlocal colorcolumn=72
autocmd BufRead $HOME/tmp/mutt-* match Over100Length /\%73v.\+/

" Make Powerline work
set encoding=utf8
set guifont=Droid\ Sans\ Mono\ for\ Powerline\ Nerd\ Font\ Complete\ 12
let g:airline_powerline_fonts = 1

" OmniSharp
let g:OmniSharp_selector_ui = 'ctrlp'  " Use ctrlp.vim
let g:OmniSharp_server_type = 'roslyn'

" CtrlP
let g:ctrlp_custom_ignore = {
            \ 'dir':  '\v[\/](\.git|\.hg|\.svn|__pycache__|_minted-.*|\.sass-cache|node_modules|coverage|output)$',
            \ 'file': '\v\.(exe|so|dll|aux|log|pdf|svg|otf|eot|woff|ttf|woff2|orig)$',
            \ 'link': '',
            \ }
let g:ctrlp_root_markers = ['.git', 'node_modules', 'package.json']
let g:ctrlp_show_hidden = 1
let g:ctrlp_open_new_file = 't'

" Commenting
noremap <F8> :Commentary<CR>

" Run make
nnoremap <F5> :make<CR>
nnoremap <S-F5> :make run<CR>

" Vim LaTeX
let g:vimtex_view_method = 'zathura'
autocmd Filetype tex,latex noremap <F5> :VimtexCompile<CR>
autocmd Filetype tex,latex nnoremap <F11> :VimtexTocToggle<CR>
autocmd Filetype tex,latex nnoremap <F12> :VimtexView<CR>

" List Trans
nmap  <S-L> :call ListTrans_toggle_format()<CR>
vmap  <S-L> :call ListTrans_toggle_format('visual')<CR>

" Vim JavaScript
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_flow = 1

" JSDoc
let g:jsdoc_allow_input_prompt = 1
let g:jsdoc_input_description = 1
let g:jsdoc_underscore_private = 1
let g:jsdoc_enable_es6 = 1

" JSX
let g:jsx_ext_required = 0 " Allow JSX in normal JS files

" Vim Templates
let g:templates_directory = '~/.vim/vim-templates'

" ALE
let g:ale_fixers = {
            \ 'css': ['remove_trailing_lines'],
            \ 'html': ['remove_trailing_lines'],
            \ 'cpp': ['remove_trailing_lines'],
            \ 'python': ['isort'],
            \ 'rust': ['remove_trailing_lines'],
            \ 'tex': ['remove_trailing_lines'],
            \ 'md': ['remove_trailing_lines'],
            \ 'javascript': ['eslint', 'standard'],
            \ 'jsx': ['eslint'],
            \}
let g:ale_open_list = 1
let g:ale_list_window_size = 5
" Map a shortcut to ALEFix
if s:os ==# "Linux\n"
    noremap <C-S-F> :Autoformat<CR>:ALEFix<CR>
else
    noremap <S-F> :Autoformat<CR>:ALEFix<CR>
endif

" Auto open the Quick Fix list after grep
" https://stackoverflow.com/a/39010855/2319844
autocmd QuickFixCmdPost [^l]* cwindow

" Color Scheme
colorscheme lanox
highlight LineNr ctermfg=grey
highlight SpellBad ctermbg=160 ctermfg=white
highlight SpellRare ctermfg=234
highlight SpellLocal ctermfg=234
highlight SpellCap ctermfg=234
highlight ColorColumn ctermbg=8 guibg=#303030
highlight Visual ctermbg=67 ctermfg=231

" Highlight past 100 characters
highlight Over100Length ctermbg=red ctermfg=white guibg=#BD4F4F
match Over100Length /\%101v.\+/

" Jump to the main editor
autocmd tabenter * wincmd p
